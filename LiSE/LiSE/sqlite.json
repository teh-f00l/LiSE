{
    "avatar_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM avatar_rulebook",
    "avatar_rulebook_dump": "SELECT avatar_rulebook.character, avatar_rulebook.branch, avatar_rulebook.turn, avatar_rulebook.tick, avatar_rulebook.rulebook \nFROM avatar_rulebook ORDER BY avatar_rulebook.character, avatar_rulebook.branch, avatar_rulebook.turn, avatar_rulebook.tick",
    "avatar_rulebook_insert": "INSERT INTO avatar_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "avatar_rules_changes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM avatar_rules_changes",
    "avatar_rules_changes_dump": "SELECT avatar_rules_changes.character, avatar_rules_changes.rulebook, avatar_rules_changes.rule, avatar_rules_changes.graph, avatar_rules_changes.avatar, avatar_rules_changes.branch, avatar_rules_changes.turn, avatar_rules_changes.tick, avatar_rules_changes.handled_branch, avatar_rules_changes.handled_turn \nFROM avatar_rules_changes ORDER BY avatar_rules_changes.character, avatar_rules_changes.rulebook, avatar_rules_changes.rule, avatar_rules_changes.graph, avatar_rules_changes.avatar, avatar_rules_changes.branch, avatar_rules_changes.turn, avatar_rules_changes.tick",
    "avatar_rules_changes_insert": "INSERT INTO avatar_rules_changes (character, rulebook, rule, graph, avatar, branch, turn, tick, handled_branch, handled_turn) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "avatar_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM avatar_rules_handled",
    "avatar_rules_handled_dump": "SELECT avatar_rules_handled.character, avatar_rules_handled.rulebook, avatar_rules_handled.rule, avatar_rules_handled.graph, avatar_rules_handled.avatar, avatar_rules_handled.branch, avatar_rules_handled.turn, avatar_rules_handled.tick \nFROM avatar_rules_handled ORDER BY avatar_rules_handled.character, avatar_rules_handled.rulebook, avatar_rules_handled.rule, avatar_rules_handled.graph, avatar_rules_handled.avatar, avatar_rules_handled.branch, avatar_rules_handled.turn",
    "avatar_rules_handled_insert": "INSERT INTO avatar_rules_handled (character, rulebook, rule, graph, avatar, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "avatars_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM avatars",
    "avatars_dump": "SELECT avatars.character_graph, avatars.avatar_graph, avatars.avatar_node, avatars.branch, avatars.turn, avatars.tick, avatars.is_avatar \nFROM avatars ORDER BY avatars.character_graph, avatars.avatar_graph, avatars.avatar_node, avatars.branch, avatars.turn, avatars.tick",
    "avatars_insert": "INSERT INTO avatars (character_graph, avatar_graph, avatar_node, branch, turn, tick, is_avatar) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "branch_children": "SELECT branches.branch \nFROM branches \nWHERE branches.parent = ?",
    "branches_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM branches",
    "branches_dump": "SELECT branches.branch, branches.parent, branches.parent_turn, branches.parent_tick, branches.end_turn, branches.end_tick \nFROM branches ORDER BY branches.branch",
    "branches_insert": "INSERT INTO branches (branch, parent, parent_turn, parent_tick, end_turn, end_tick) VALUES (?, ?, ?, ?, ?, ?)",
    "character_place_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_place_rulebook",
    "character_place_rulebook_dump": "SELECT character_place_rulebook.character, character_place_rulebook.branch, character_place_rulebook.turn, character_place_rulebook.tick, character_place_rulebook.rulebook \nFROM character_place_rulebook ORDER BY character_place_rulebook.character, character_place_rulebook.branch, character_place_rulebook.turn, character_place_rulebook.tick",
    "character_place_rulebook_insert": "INSERT INTO character_place_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_place_rules_changes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_place_rules_changes",
    "character_place_rules_changes_dump": "SELECT character_place_rules_changes.character, character_place_rules_changes.rulebook, character_place_rules_changes.rule, character_place_rules_changes.place, character_place_rules_changes.branch, character_place_rules_changes.turn, character_place_rules_changes.tick, character_place_rules_changes.handled_branch, character_place_rules_changes.handled_turn \nFROM character_place_rules_changes ORDER BY character_place_rules_changes.character, character_place_rules_changes.rulebook, character_place_rules_changes.rule, character_place_rules_changes.place, character_place_rules_changes.branch, character_place_rules_changes.turn, character_place_rules_changes.tick",
    "character_place_rules_changes_insert": "INSERT INTO character_place_rules_changes (character, rulebook, rule, place, branch, turn, tick, handled_branch, handled_turn) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "character_place_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_place_rules_handled",
    "character_place_rules_handled_dump": "SELECT character_place_rules_handled.character, character_place_rules_handled.rulebook, character_place_rules_handled.rule, character_place_rules_handled.place, character_place_rules_handled.branch, character_place_rules_handled.turn, character_place_rules_handled.tick \nFROM character_place_rules_handled ORDER BY character_place_rules_handled.character, character_place_rules_handled.rulebook, character_place_rules_handled.rule, character_place_rules_handled.place, character_place_rules_handled.branch, character_place_rules_handled.turn",
    "character_place_rules_handled_insert": "INSERT INTO character_place_rules_handled (character, rulebook, rule, place, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "character_portal_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_portal_rulebook",
    "character_portal_rulebook_dump": "SELECT character_portal_rulebook.character, character_portal_rulebook.branch, character_portal_rulebook.turn, character_portal_rulebook.tick, character_portal_rulebook.rulebook \nFROM character_portal_rulebook ORDER BY character_portal_rulebook.character, character_portal_rulebook.branch, character_portal_rulebook.turn, character_portal_rulebook.tick",
    "character_portal_rulebook_insert": "INSERT INTO character_portal_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_portal_rules_changes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_portal_rules_changes",
    "character_portal_rules_changes_dump": "SELECT character_portal_rules_changes.character, character_portal_rules_changes.rulebook, character_portal_rules_changes.rule, character_portal_rules_changes.orig, character_portal_rules_changes.dest, character_portal_rules_changes.branch, character_portal_rules_changes.turn, character_portal_rules_changes.tick, character_portal_rules_changes.handled_branch, character_portal_rules_changes.handled_turn \nFROM character_portal_rules_changes ORDER BY character_portal_rules_changes.character, character_portal_rules_changes.rulebook, character_portal_rules_changes.rule, character_portal_rules_changes.orig, character_portal_rules_changes.dest, character_portal_rules_changes.branch, character_portal_rules_changes.turn, character_portal_rules_changes.tick",
    "character_portal_rules_changes_insert": "INSERT INTO character_portal_rules_changes (character, rulebook, rule, orig, dest, branch, turn, tick, handled_branch, handled_turn) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "character_portal_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_portal_rules_handled",
    "character_portal_rules_handled_dump": "SELECT character_portal_rules_handled.character, character_portal_rules_handled.rulebook, character_portal_rules_handled.rule, character_portal_rules_handled.orig, character_portal_rules_handled.dest, character_portal_rules_handled.branch, character_portal_rules_handled.turn, character_portal_rules_handled.tick \nFROM character_portal_rules_handled ORDER BY character_portal_rules_handled.character, character_portal_rules_handled.rulebook, character_portal_rules_handled.rule, character_portal_rules_handled.orig, character_portal_rules_handled.dest, character_portal_rules_handled.branch, character_portal_rules_handled.turn",
    "character_portal_rules_handled_insert": "INSERT INTO character_portal_rules_handled (character, rulebook, rule, orig, dest, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "character_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_rulebook",
    "character_rulebook_dump": "SELECT character_rulebook.character, character_rulebook.branch, character_rulebook.turn, character_rulebook.tick, character_rulebook.rulebook \nFROM character_rulebook ORDER BY character_rulebook.character, character_rulebook.branch, character_rulebook.turn, character_rulebook.tick",
    "character_rulebook_insert": "INSERT INTO character_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_rules_changes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_rules_changes",
    "character_rules_changes_dump": "SELECT character_rules_changes.character, character_rules_changes.rulebook, character_rules_changes.rule, character_rules_changes.branch, character_rules_changes.turn, character_rules_changes.tick, character_rules_changes.handled_branch, character_rules_changes.handled_turn \nFROM character_rules_changes ORDER BY character_rules_changes.character, character_rules_changes.rulebook, character_rules_changes.rule, character_rules_changes.branch, character_rules_changes.turn, character_rules_changes.tick",
    "character_rules_changes_insert": "INSERT INTO character_rules_changes (character, rulebook, rule, branch, turn, tick, handled_branch, handled_turn) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "character_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_rules_handled",
    "character_rules_handled_dump": "SELECT character_rules_handled.character, character_rules_handled.rulebook, character_rules_handled.rule, character_rules_handled.branch, character_rules_handled.turn, character_rules_handled.tick \nFROM character_rules_handled ORDER BY character_rules_handled.character, character_rules_handled.rulebook, character_rules_handled.rule, character_rules_handled.branch, character_rules_handled.turn",
    "character_rules_handled_insert": "INSERT INTO character_rules_handled (character, rulebook, rule, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?)",
    "character_thing_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_thing_rulebook",
    "character_thing_rulebook_dump": "SELECT character_thing_rulebook.character, character_thing_rulebook.branch, character_thing_rulebook.turn, character_thing_rulebook.tick, character_thing_rulebook.rulebook \nFROM character_thing_rulebook ORDER BY character_thing_rulebook.character, character_thing_rulebook.branch, character_thing_rulebook.turn, character_thing_rulebook.tick",
    "character_thing_rulebook_insert": "INSERT INTO character_thing_rulebook (character, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?)",
    "character_thing_rules_changes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_thing_rules_changes",
    "character_thing_rules_changes_dump": "SELECT character_thing_rules_changes.character, character_thing_rules_changes.rulebook, character_thing_rules_changes.rule, character_thing_rules_changes.thing, character_thing_rules_changes.branch, character_thing_rules_changes.turn, character_thing_rules_changes.tick, character_thing_rules_changes.handled_branch, character_thing_rules_changes.handled_turn \nFROM character_thing_rules_changes ORDER BY character_thing_rules_changes.character, character_thing_rules_changes.rulebook, character_thing_rules_changes.rule, character_thing_rules_changes.thing, character_thing_rules_changes.branch, character_thing_rules_changes.turn, character_thing_rules_changes.tick",
    "character_thing_rules_changes_insert": "INSERT INTO character_thing_rules_changes (character, rulebook, rule, thing, branch, turn, tick, handled_branch, handled_turn) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "character_thing_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM character_thing_rules_handled",
    "character_thing_rules_handled_dump": "SELECT character_thing_rules_handled.character, character_thing_rules_handled.rulebook, character_thing_rules_handled.rule, character_thing_rules_handled.thing, character_thing_rules_handled.branch, character_thing_rules_handled.turn, character_thing_rules_handled.tick \nFROM character_thing_rules_handled ORDER BY character_thing_rules_handled.character, character_thing_rules_handled.rulebook, character_thing_rules_handled.rule, character_thing_rules_handled.thing, character_thing_rules_handled.branch, character_thing_rules_handled.turn",
    "character_thing_rules_handled_insert": "INSERT INTO character_thing_rules_handled (character, rulebook, rule, thing, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "create_avatar_rulebook": "\nCREATE TABLE avatar_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_avatar_rules_changes": "\nCREATE TABLE avatar_rules_changes (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tgraph TEXT NOT NULL, \n\tavatar TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\thandled_branch TEXT NOT NULL, \n\thandled_turn TEXT NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, graph, avatar, branch, turn, tick), \n\tFOREIGN KEY(character, rulebook, rule, graph, avatar, handled_branch, handled_turn) REFERENCES avatar_rules_handled (character, rulebook, rule, graph, avatar, branch, turn)\n)\n\n",
    "create_avatar_rules_handled": "\nCREATE TABLE avatar_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tgraph TEXT NOT NULL, \n\tavatar TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, graph, avatar, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES avatar_rulebook (character, rulebook)\n)\n\n",
    "create_avatars": "\nCREATE TABLE avatars (\n\tcharacter_graph TEXT NOT NULL, \n\tavatar_graph TEXT NOT NULL, \n\tavatar_node TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tis_avatar BOOLEAN NOT NULL, \n\tPRIMARY KEY (character_graph, avatar_graph, avatar_node, branch, turn, tick), \n\tFOREIGN KEY(character_graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(avatar_graph, avatar_node) REFERENCES nodes (graph, node), \n\tCHECK (is_avatar IN (0, 1))\n)\n\n",
    "create_branches": "\nCREATE TABLE branches (\n\tbranch TEXT NOT NULL, \n\tparent TEXT, \n\tparent_turn INTEGER NOT NULL, \n\tparent_tick INTEGER NOT NULL, \n\tend_turn INTEGER NOT NULL, \n\tend_tick INTEGER NOT NULL, \n\tPRIMARY KEY (branch), \n\tCHECK (branch<>parent), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n\n",
    "create_character_place_rulebook": "\nCREATE TABLE character_place_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_place_rules_changes": "\nCREATE TABLE character_place_rules_changes (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tplace TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\thandled_branch TEXT NOT NULL, \n\thandled_turn INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, place, branch, turn, tick), \n\tFOREIGN KEY(character, rulebook, rule, place, handled_branch, handled_turn) REFERENCES character_place_rules_handled (character, rulebook, rule, place, branch, turn)\n)\n\n",
    "create_character_place_rules_handled": "\nCREATE TABLE character_place_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tplace TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, place, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_place_rulebook (character, rulebook), \n\tFOREIGN KEY(character, place) REFERENCES nodes (graph, node)\n)\n\n",
    "create_character_portal_rulebook": "\nCREATE TABLE character_portal_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_portal_rules_changes": "\nCREATE TABLE character_portal_rules_changes (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\thandled_branch TEXT NOT NULL, \n\thandled_turn INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, orig, dest, branch, turn, tick), \n\tFOREIGN KEY(character, rulebook, rule, orig, dest, handled_branch, handled_turn) REFERENCES character_portal_rules_handled (character, rulebook, rule, orig, dest, branch, turn)\n)\n\n",
    "create_character_portal_rules_handled": "\nCREATE TABLE character_portal_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, orig, dest, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_portal_rulebook (character, rulebook), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n\n",
    "create_character_rulebook": "\nCREATE TABLE character_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_rules_changes": "\nCREATE TABLE character_rules_changes (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\thandled_branch TEXT NOT NULL, \n\thandled_turn TEXT NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, turn, tick), \n\tFOREIGN KEY(character, rulebook, rule, handled_branch, handled_turn) REFERENCES character_rules_handled (character, rulebook, rule, branch, turn)\n)\n\n",
    "create_character_rules_handled": "\nCREATE TABLE character_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_rulebook (character, rulebook)\n)\n\n",
    "create_character_thing_rulebook": "\nCREATE TABLE character_thing_rulebook (\n\tcharacter TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph), \n\tFOREIGN KEY(rulebook) REFERENCES rulebooks (rulebook)\n)\n\n",
    "create_character_thing_rules_changes": "\nCREATE TABLE character_thing_rules_changes (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tthing TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\thandled_branch TEXT NOT NULL, \n\thandled_turn INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, thing, branch, turn, tick), \n\tFOREIGN KEY(character, rulebook, rule, thing, handled_branch, handled_turn) REFERENCES character_thing_rules_handled (character, rulebook, rule, thing, branch, turn)\n)\n\n",
    "create_character_thing_rules_handled": "\nCREATE TABLE character_thing_rules_handled (\n\tcharacter TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tthing TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, rulebook, rule, thing, branch, turn), \n\tFOREIGN KEY(character, rulebook) REFERENCES character_thing_rulebook (character, rulebook), \n\tFOREIGN KEY(character, thing) REFERENCES things (character, thing)\n)\n\n",
    "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, orig, dest, idx, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph, orig, dest, idx) REFERENCES edges (graph, orig, dest, idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_edges": "\nCREATE TABLE edges (\n\tgraph TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, orig, dest, idx, branch, turn, tick), \n\tFOREIGN KEY(graph, orig) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, dest) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_global": "\nCREATE TABLE global (\n\t\"key\" TEXT NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (\"key\")\n)\n\n",
    "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph TEXT NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_graphs": "\nCREATE TABLE graphs (\n\tgraph TEXT NOT NULL, \n\ttype TEXT NOT NULL, \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n\n",
    "create_node_rulebook": "\nCREATE TABLE node_rulebook (\n\tcharacter TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, node, branch, turn, tick), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n\n",
    "create_node_rules_changes": "\nCREATE TABLE node_rules_changes (\n\tcharacter TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\thandled_branch TEXT NOT NULL, \n\thandled_turn INTEGER NOT NULL, \n\tPRIMARY KEY (character, node, rulebook, rule, branch, turn, tick), \n\tFOREIGN KEY(character, node, rulebook, rule, handled_branch, handled_turn) REFERENCES node_rules_handled (character, node, rulebook, rule, branch, turn)\n)\n\n",
    "create_node_rules_handled": "\nCREATE TABLE node_rules_handled (\n\tcharacter TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, node, rulebook, rule, branch, turn), \n\tFOREIGN KEY(character, node) REFERENCES nodes (graph, node)\n)\n\n",
    "create_node_val": "\nCREATE TABLE node_val (\n\tgraph TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, node, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_nodes": "\nCREATE TABLE nodes (\n\tgraph TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, node, branch, turn, tick), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_portal_rulebook": "\nCREATE TABLE portal_rulebook (\n\tcharacter TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trulebook TEXT NOT NULL, \n\tPRIMARY KEY (character, orig, dest, branch, turn, tick), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n\n",
    "create_portal_rules_changes": "\nCREATE TABLE portal_rules_changes (\n\tcharacter TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\thandled_branch TEXT NOT NULL, \n\thandled_turn INTEGER NOT NULL, \n\tPRIMARY KEY (character, orig, dest, rulebook, rule, branch, turn, tick), \n\tFOREIGN KEY(character, orig, dest, rulebook, rule, handled_branch, handled_turn) REFERENCES portal_rules_handled (character, orig, dest, rulebook, rule, branch, turn)\n)\n\n",
    "create_portal_rules_handled": "\nCREATE TABLE portal_rules_handled (\n\tcharacter TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\trulebook TEXT NOT NULL, \n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (character, orig, dest, rulebook, rule, branch, turn), \n\tFOREIGN KEY(character, orig, dest) REFERENCES edges (graph, orig, dest)\n)\n\n",
    "create_rule_actions": "\nCREATE TABLE rule_actions (\n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tactions TEXT NOT NULL, \n\tPRIMARY KEY (rule, branch, turn, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rule_prereqs": "\nCREATE TABLE rule_prereqs (\n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tprereqs TEXT NOT NULL, \n\tPRIMARY KEY (rule, branch, turn, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rule_triggers": "\nCREATE TABLE rule_triggers (\n\trule TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\ttriggers TEXT NOT NULL, \n\tPRIMARY KEY (rule, branch, turn, tick), \n\tFOREIGN KEY(rule) REFERENCES rules (rule)\n)\n\n",
    "create_rulebooks": "\nCREATE TABLE rulebooks (\n\trulebook TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\trules TEXT NOT NULL, \n\tPRIMARY KEY (rulebook, branch, turn, tick)\n)\n\n",
    "create_rules": "\nCREATE TABLE rules (\n\trule TEXT NOT NULL, \n\tPRIMARY KEY (rule)\n)\n\n",
    "create_senses": "\nCREATE TABLE senses (\n\tcharacter TEXT, \n\tsense TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tfunction TEXT, \n\tPRIMARY KEY (character, sense, branch, turn, tick), \n\tFOREIGN KEY(character) REFERENCES graphs (graph)\n)\n\n",
    "create_things": "\nCREATE TABLE things (\n\tcharacter TEXT NOT NULL, \n\tthing TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tlocation TEXT NOT NULL, \n\tPRIMARY KEY (character, thing, branch, turn, tick), \n\tFOREIGN KEY(character, thing) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(character, location) REFERENCES nodes (graph, node)\n)\n\n",
    "create_turns": "\nCREATE TABLE turns (\n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\tend_tick INTEGER NOT NULL, \n\tplan_end_tick INTEGER NOT NULL, \n\tPRIMARY KEY (branch, turn)\n)\n\n",
    "create_turns_completed": "\nCREATE TABLE turns_completed (\n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\tPRIMARY KEY (branch)\n)\n\n",
    "create_universals": "\nCREATE TABLE universals (\n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT NOT NULL, \n\tPRIMARY KEY (\"key\", branch, turn, tick)\n)\n\n",
    "del_avatars_after": "DELETE FROM avatars WHERE avatars.character_graph = ? AND avatars.avatar_graph = ? AND avatars.avatar_node = ? AND avatars.branch = ? AND (avatars.turn > ? OR avatars.turn = ? AND avatars.tick >= ?)",
    "del_char_avatars": "DELETE FROM avatars WHERE avatars.character_graph = ?",
    "del_char_things": "DELETE FROM things WHERE things.character = ?",
    "del_edge_val_after": "DELETE FROM edge_val WHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND (edge_val.turn > ? OR edge_val.turn = ? AND edge_val.tick >= ?)",
    "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?",
    "del_edges_after": "DELETE FROM edges WHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND (edges.turn > ? OR edges.turn = ? AND edges.tick >= ?)",
    "del_edges_graph": "DELETE FROM edges WHERE edges.graph = ?",
    "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?",
    "del_graph_val_after": "DELETE FROM graph_val WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND (graph_val.turn > ? OR graph_val.turn = ? AND graph_val.tick >= ?)",
    "del_node_val_after": "DELETE FROM node_val WHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND (node_val.turn > ? OR node_val.turn = ? AND node_val.tick >= ?)",
    "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?",
    "del_nodes_after": "DELETE FROM nodes WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND (nodes.turn > ? OR nodes.turn = ? AND nodes.tick >= ?)",
    "del_nodes_graph": "DELETE FROM nodes WHERE nodes.graph = ?",
    "del_things_after": "DELETE FROM things WHERE things.character = ? AND things.thing = ? AND things.branch = ? AND (things.turn > ? OR things.turn = ? AND things.tick >= ?)",
    "edge_val_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM edge_val",
    "edge_val_dump": "SELECT edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.turn, edge_val.tick, edge_val.value \nFROM edge_val ORDER BY edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.turn, edge_val.tick",
    "edge_val_insert": "INSERT INTO edge_val (graph, orig, dest, idx, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "edges_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM edges",
    "edges_dump": "SELECT edges.graph, edges.orig, edges.dest, edges.idx, edges.branch, edges.turn, edges.tick, edges.extant \nFROM edges ORDER BY edges.graph, edges.orig, edges.dest, edges.idx, edges.branch, edges.turn, edges.tick",
    "edges_insert": "INSERT INTO edges (graph, orig, dest, idx, branch, turn, tick, extant) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "global_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM global",
    "global_delete": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_dump": "SELECT global.\"key\", global.value \nFROM global ORDER BY global.\"key\"",
    "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?",
    "global_insert": "INSERT INTO global (\"key\", value) VALUES (?, ?)",
    "global_update": "UPDATE global SET value=? WHERE global.\"key\" = ?",
    "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?",
    "graph_val_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM graph_val",
    "graph_val_dump": "SELECT graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.turn, graph_val.tick, graph_val.value \nFROM graph_val ORDER BY graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.turn, graph_val.tick",
    "graph_val_insert": "INSERT INTO graph_val (graph, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?)",
    "graphs_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM graphs",
    "graphs_dump": "SELECT graphs.graph, graphs.type \nFROM graphs ORDER BY graphs.graph",
    "graphs_insert": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "graphs_named": "SELECT COUNT() AS \"COUNT_1\" \nFROM graphs \nWHERE graphs.graph = ?",
    "graphs_types": "SELECT graphs.graph, graphs.type \nFROM graphs",
    "new_graph": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "node_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM node_rulebook",
    "node_rulebook_dump": "SELECT node_rulebook.character, node_rulebook.node, node_rulebook.branch, node_rulebook.turn, node_rulebook.tick, node_rulebook.rulebook \nFROM node_rulebook ORDER BY node_rulebook.character, node_rulebook.node, node_rulebook.branch, node_rulebook.turn, node_rulebook.tick",
    "node_rulebook_insert": "INSERT INTO node_rulebook (character, node, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?, ?)",
    "node_rules_changes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM node_rules_changes",
    "node_rules_changes_dump": "SELECT node_rules_changes.character, node_rules_changes.node, node_rules_changes.rulebook, node_rules_changes.rule, node_rules_changes.branch, node_rules_changes.turn, node_rules_changes.tick, node_rules_changes.handled_branch, node_rules_changes.handled_turn \nFROM node_rules_changes ORDER BY node_rules_changes.character, node_rules_changes.node, node_rules_changes.rulebook, node_rules_changes.rule, node_rules_changes.branch, node_rules_changes.turn, node_rules_changes.tick",
    "node_rules_changes_insert": "INSERT INTO node_rules_changes (character, node, rulebook, rule, branch, turn, tick, handled_branch, handled_turn) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "node_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM node_rules_handled",
    "node_rules_handled_dump": "SELECT node_rules_handled.character, node_rules_handled.node, node_rules_handled.rulebook, node_rules_handled.rule, node_rules_handled.branch, node_rules_handled.turn, node_rules_handled.tick \nFROM node_rules_handled ORDER BY node_rules_handled.character, node_rules_handled.node, node_rules_handled.rulebook, node_rules_handled.rule, node_rules_handled.branch, node_rules_handled.turn",
    "node_rules_handled_insert": "INSERT INTO node_rules_handled (character, node, rulebook, rule, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "node_val_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM node_val",
    "node_val_dump": "SELECT node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.turn, node_val.tick, node_val.value \nFROM node_val ORDER BY node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.turn, node_val.tick",
    "node_val_insert": "INSERT INTO node_val (graph, node, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "nodes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM nodes",
    "nodes_dump": "SELECT nodes.graph, nodes.node, nodes.branch, nodes.turn, nodes.tick, nodes.extant \nFROM nodes ORDER BY nodes.graph, nodes.node, nodes.branch, nodes.turn, nodes.tick",
    "nodes_insert": "INSERT INTO nodes (graph, node, branch, turn, tick, extant) VALUES (?, ?, ?, ?, ?, ?)",
    "portal_rulebook_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM portal_rulebook",
    "portal_rulebook_dump": "SELECT portal_rulebook.character, portal_rulebook.orig, portal_rulebook.dest, portal_rulebook.branch, portal_rulebook.turn, portal_rulebook.tick, portal_rulebook.rulebook \nFROM portal_rulebook ORDER BY portal_rulebook.character, portal_rulebook.orig, portal_rulebook.dest, portal_rulebook.branch, portal_rulebook.turn, portal_rulebook.tick",
    "portal_rulebook_insert": "INSERT INTO portal_rulebook (character, orig, dest, branch, turn, tick, rulebook) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "portal_rules_changes_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM portal_rules_changes",
    "portal_rules_changes_dump": "SELECT portal_rules_changes.character, portal_rules_changes.orig, portal_rules_changes.dest, portal_rules_changes.rulebook, portal_rules_changes.rule, portal_rules_changes.branch, portal_rules_changes.turn, portal_rules_changes.tick, portal_rules_changes.handled_branch, portal_rules_changes.handled_turn \nFROM portal_rules_changes ORDER BY portal_rules_changes.character, portal_rules_changes.orig, portal_rules_changes.dest, portal_rules_changes.rulebook, portal_rules_changes.rule, portal_rules_changes.branch, portal_rules_changes.turn, portal_rules_changes.tick",
    "portal_rules_changes_insert": "INSERT INTO portal_rules_changes (character, orig, dest, rulebook, rule, branch, turn, tick, handled_branch, handled_turn) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "portal_rules_handled_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM portal_rules_handled",
    "portal_rules_handled_dump": "SELECT portal_rules_handled.character, portal_rules_handled.orig, portal_rules_handled.dest, portal_rules_handled.rulebook, portal_rules_handled.rule, portal_rules_handled.branch, portal_rules_handled.turn, portal_rules_handled.tick \nFROM portal_rules_handled ORDER BY portal_rules_handled.character, portal_rules_handled.orig, portal_rules_handled.dest, portal_rules_handled.rulebook, portal_rules_handled.rule, portal_rules_handled.branch, portal_rules_handled.turn",
    "portal_rules_handled_insert": "INSERT INTO portal_rules_handled (character, orig, dest, rulebook, rule, branch, turn, tick) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "rule_actions_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rule_actions",
    "rule_actions_dump": "SELECT rule_actions.rule, rule_actions.branch, rule_actions.turn, rule_actions.tick, rule_actions.actions \nFROM rule_actions ORDER BY rule_actions.rule, rule_actions.branch, rule_actions.turn, rule_actions.tick",
    "rule_actions_insert": "INSERT INTO rule_actions (rule, branch, turn, tick, actions) VALUES (?, ?, ?, ?, ?)",
    "rule_prereqs_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rule_prereqs",
    "rule_prereqs_dump": "SELECT rule_prereqs.rule, rule_prereqs.branch, rule_prereqs.turn, rule_prereqs.tick, rule_prereqs.prereqs \nFROM rule_prereqs ORDER BY rule_prereqs.rule, rule_prereqs.branch, rule_prereqs.turn, rule_prereqs.tick",
    "rule_prereqs_insert": "INSERT INTO rule_prereqs (rule, branch, turn, tick, prereqs) VALUES (?, ?, ?, ?, ?)",
    "rule_triggers_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rule_triggers",
    "rule_triggers_dump": "SELECT rule_triggers.rule, rule_triggers.branch, rule_triggers.turn, rule_triggers.tick, rule_triggers.triggers \nFROM rule_triggers ORDER BY rule_triggers.rule, rule_triggers.branch, rule_triggers.turn, rule_triggers.tick",
    "rule_triggers_insert": "INSERT INTO rule_triggers (rule, branch, turn, tick, triggers) VALUES (?, ?, ?, ?, ?)",
    "rulebooks_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rulebooks",
    "rulebooks_dump": "SELECT rulebooks.rulebook, rulebooks.branch, rulebooks.turn, rulebooks.tick, rulebooks.rules \nFROM rulebooks ORDER BY rulebooks.rulebook, rulebooks.branch, rulebooks.turn, rulebooks.tick",
    "rulebooks_insert": "INSERT INTO rulebooks (rulebook, branch, turn, tick, rules) VALUES (?, ?, ?, ?, ?)",
    "rules_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM rules",
    "rules_dump": "SELECT rules.rule \nFROM rules ORDER BY rules.rule",
    "rules_insert": "INSERT INTO rules (rule) VALUES (?)",
    "senses_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM senses",
    "senses_dump": "SELECT senses.character, senses.sense, senses.branch, senses.turn, senses.tick, senses.function \nFROM senses ORDER BY senses.character, senses.sense, senses.branch, senses.turn, senses.tick",
    "senses_insert": "INSERT INTO senses (character, sense, branch, turn, tick, function) VALUES (?, ?, ?, ?, ?, ?)",
    "things_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM things",
    "things_dump": "SELECT things.character, things.thing, things.branch, things.turn, things.tick, things.location \nFROM things ORDER BY things.character, things.thing, things.branch, things.turn, things.tick",
    "things_insert": "INSERT INTO things (character, thing, branch, turn, tick, location) VALUES (?, ?, ?, ?, ?, ?)",
    "turns_completed_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM turns_completed",
    "turns_completed_dump": "SELECT turns_completed.branch, turns_completed.turn \nFROM turns_completed ORDER BY turns_completed.branch",
    "turns_completed_insert": "INSERT INTO turns_completed (branch, turn) VALUES (?, ?)",
    "turns_completed_update": "UPDATE turns_completed SET turn=? WHERE turns_completed.branch = ?",
    "turns_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM turns",
    "turns_dump": "SELECT turns.branch, turns.turn, turns.end_tick, turns.plan_end_tick \nFROM turns ORDER BY turns.branch, turns.turn",
    "turns_insert": "INSERT INTO turns (branch, turn, end_tick, plan_end_tick) VALUES (?, ?, ?, ?)",
    "universals_count": "SELECT COUNT(?) AS \"COUNT_1\" \nFROM universals",
    "universals_dump": "SELECT universals.\"key\", universals.branch, universals.turn, universals.tick, universals.value \nFROM universals ORDER BY universals.\"key\", universals.branch, universals.turn, universals.tick",
    "universals_insert": "INSERT INTO universals (\"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?)",
    "update_branches": "UPDATE branches SET parent=?, parent_turn=?, parent_tick=?, end_turn=?, end_tick=? WHERE branches.branch = ?",
    "update_turns": "UPDATE turns SET end_tick=?, plan_end_tick=? WHERE turns.branch = ? AND turns.turn = ?"
}
